var global_data = {};
// ajax get points data
function getPointsData(){
	$.ajax({
      url:'/points/get_d3_data',
      type: "GET",
      data: {},
      success:function(d){
      	  console.log("i success get data");
          console.log(d);
          global_data["member_points"] = d;
          visualizeBars(d);
          visualizeCommitteeBars(d, "Publications")
          visualizeCommitteeBars(d, "Consulting")
          visualizeCommitteeBars(d, "Historian")
          visualizeCommitteeBars(d, "Community")
          visualizeCommitteeBars(d, "Finance")
          visualizeCommitteeBars(d, "Professional")
          visualizeCommitteeBars(d, "Social")
          visualizeCommitteeBars(d, "Marketing")
          visualizeCommitteeBars(d, "Executives")
          $("#message").hide();
      },
      complete:function(){
      },
      error:function (xhr, textStatus, thrownError){}
  });
}
function getMax(mem_points){
	var max = -1;
	for(var i;i<mem_points.length;i++){
		var v = mem_points[i]["points"];
		if (v>max){
			max = v;
		}
	}
	return max;
}
function visualizeBars(data){
	var width = 800,
	    barHeight = 20;
	var max = 500;
	var x = d3.scale.linear()
	    .domain([0, max])
	    .range([0, width]);

	var chart = d3.select(".chart")
	    .attr("width", width)
	    .attr("height", barHeight * data.length);

	var bar = chart.selectAll("g")
	    .data(data)
	  .enter().append("g")
	    .attr("transform", function(d, i) { return "translate(5," + i * barHeight + ")"; });

	bar.append("rect")
		.attr("class", function(d){
			return d["committee"];
		})
	    .attr("width", function(d){
	    	return x(d["points"]);
	    })
	    .attr("height", barHeight - 1);
	bar.append("text")
		.attr("class", "bartext")
	    .attr("x", function(d){
	    	return x(d["points"])-3;
	    })
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .text(function(d) { return d["points"] });
	bar.append("text")
	    .attr("class", "bartext2")
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .attr("x", function(d){
	    	return x(d["points"])+10;
	    })
	    .text(function(d) { return d["name"] });
}
function visualizeCommitteeBars(data, committee){
	// remove some things fromd data
	new_data = []
	for (var i=0;i<data.length;i++){
		if(data[i]["committee"].indexOf(committee) != -1){
			new_data.push(data[i]);
		}
	}
	var width = 400,
	    barHeight = 20;
	var max = 500;
	var x = d3.scale.linear()
	    .domain([0, max])
	    .range([0, width]);

	var chart = d3.select("#"+committee)
	    .attr("width", width)
	    .attr("height", barHeight * new_data.length);

	var bar = chart.selectAll("g")
	    .data(new_data)
	  .enter().append("g")
	    .attr("transform", function(d, i) { return "translate(5," + i * barHeight + ")"; });

	bar.append("rect")
		.attr("class", function(d){
			return d["committee"];
		})
	    .attr("width", function(d){
	    	return x(d["points"]);
	    })
	    .attr("height", barHeight - 1);
	bar.append("text")
		.attr("class", "bartext")
	    .attr("x", function(d){
	    	return x(d["points"])-3;
	    })
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .text(function(d) { return d["points"] });
	bar.append("text")
	    .attr("class", "bartext2")
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .attr("x", function(d){
	    	return x(d["points"])+10;
	    })
	    .text(function(d) { return d["name"] });
}

// all dem current methods start he-uh

//draws rectangles for all people all points but shades them different colors based on committee
function visualizePointsList(pointsList){
	pointsList.sort(compare).reverse();
	var width = 300,
	    barHeight = 7;
	var max = 500;
	var x = d3.scale.linear()
	    .domain([0, max])
	    .range([0, width]);

	var chart = d3.select("#all-points-chart")
	    .attr("height", width)
	    .attr("width", barHeight * pointsList.length);

	// var bar = chart.selectAll("g")
	//     .data(pointsList)
	//   .enter().append("g")
	//     .attr("transform", function(d, i) { return "translate(5," + i * barHeight + ")"; });

	// horizontal
	var bar = chart.selectAll("g")
	    .data(pointsList)
	  .enter().append("g")
	    .attr("transform", function(d, i) { return "translate(" + i * barHeight + "," + (200 - x(d["points"]))+")"; });

	bar.append("rect")
		.attr("class", function(d){
			if( d["committee"] == current_committee){
				return 'redbar';
			}
			return 'blackbar';
		})
	    .attr("height", function(d){
	    	return x(d["points"]);
	    })
	    .attr("width", barHeight - 1);
	// append text only to your committee bars
	// bar.append("text")
	//     .attr("class", "bartext2")
	//     .attr("x", barHeight / 2)
	//     .attr("dy", ".35em")
	//     .attr("y", function(d){
	//     	return 0-x(d["points"])+10;
	//     })
	//     .text(function(d) {
	//     	if(d["committee"] == current_committee){
	//     		return d["name"];
	//     	}
	//     })
	//     .attr("transform","rotate(90)");

	// now flip the svg so that its upright
	// $("#all-points-chart").attr("transform", "translate(0, 400); scale(1, -1);");
	// <g transform="translate(0,400)">
	// <g transform="scale(1,-1)">

}

//draws rectangle only for one committee
//tell me what committee, give me the list, tell me where you want it drawn fool
function visualizeCommitteeBars(pointsList, committee, location){
	pointsList = keepCurrentCommittees(pointsList, committee);
	pointsList.sort(compare).reverse();

	var width = 400,
	    barHeight = 20;
	var max = 500;
	var x = d3.scale.linear()
	    .domain([0, max])
	    .range([0, width]);

	var chart = d3.select(location)
	    .attr("width", width)
	    .attr("height", barHeight * pointsList.length);

	var bar = chart.selectAll("g")
	    .data(pointsList)
	  .enter().append("g")
	    .attr("transform", function(d, i) { return "translate(5," + i * barHeight + ")"; });

	bar.append("rect")
		.attr("class", function(d){
			return 'redbar'
		})
	    .attr("width", function(d){
	    	return x(d["points"]);
	    })
	    .attr("height", barHeight - 1);
	bar.append("text")
		.attr("class", "bartext")
	    .attr("x", function(d){
	    	return x(d["points"])-3;
	    })
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .text(function(d) { return d["points"] });
	bar.append("text")
	    .attr("class", "bartext2")
	    .attr("y", barHeight / 2)
	    .attr("dy", ".35em")
	    .attr("x", function(d){
	    	return x(d["points"])+10;
	    })
	    .text(function(d) { return d["name"] });
}
function keepCurrentCommittees(data, committee){
	for(var i=0;i<data.length;i++){
		if(data[i]["committee"] != committee){
			data.splice(i,1);
			i--;
		}
	}
	return data;
}
function writeTopCMs(pointsList, location)
{
	var count = 0;
	var ol = document.createElement("ol");
	pointsList.sort(compare).reverse();
	for(var i=0;i<pointsList.length;i++){
		if(pointsList[i]["committee"] != "Executives" && pointsList[i]["position"]=="cm"){
			var li = document.createElement("li");
			$(li).text(pointsList[i]["name"]+": "+pointsList[i]["points"]+" points");
			$(ol).append(li);
			count = count + 1;
		}
		else{
			console.log(pointsList[i]["position"]);
		}
		if(count>=10){
			break;
		}
	}
	$(location).append(ol);
}
function compare(a,b) {
  if (a["points"] < b["points"])
     return -1;
  if (a["points"] > b["points"])
    return 1;
  return 0;
}
$(document).ready(function(){
});